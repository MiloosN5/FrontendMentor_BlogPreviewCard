@use 'sass:math';

@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16)+rem;
  }

  @else {
    @error 'Don\'t use units when using the rem() function; only numbers';
  }
}

@function em($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16)+em;
  }

  @else {
    @error 'Don\'t use units when using the em() function; only numbers';
  }
}

@function fluidValue($min-width, $max-width, $min-size, $max-size) {
  // Convert width values to rem units
  $min-width: math.div($min-width, 16) * 1rem;
  $max-width: math.div($max-width, 16) * 1rem;

  // Convert size values to rem units
  $min-size-rem: math.div($min-size, 16) * 1rem;
  $max-size-rem: math.div($max-size, 16) * 1rem;

  // Calculate slope and intercept
  $slope: math.div($max-size-rem - $min-size-rem, $max-width - $min-width);
  $intercept: $min-size-rem - ($slope * $min-width);

  // Initialize $return-value
  $return-value: null;

  @if ($max-size > $min-size) {
    @if ($min-size < 0 and $max-size < 0) {
      $return-value: clamp(#{$min-size-rem}, #{$intercept} + $slope * 100vw, #{$max-size-rem});
    }
    @else if ($min-size < 0 and $max-size > 0) {
      $return-value: clamp(#{$min-size-rem}, #{$intercept} + $slope * 100vw, #{$max-size-rem});
    }
    @else {
      $return-value: clamp(#{$min-size-rem}, #{$intercept} + $slope * 100vw, #{$max-size-rem});
    }
  }
  @else {
    @if ($min-size < 0 and $max-size < 0) {
      $return-value: clamp(#{$max-size-rem}, #{$intercept} + $slope * 100vw, #{$min-size-rem});
    }
    @else if ($min-size > 0 and $max-size < 0) {
      $return-value: clamp(#{$max-size-rem}, #{$intercept} + $slope * 100vw, #{$min-size-rem});
    }
    @else {
      $return-value: clamp(#{$max-size-rem}, #{$intercept} + $slope * 100vw, #{$min-size-rem});
    }
  }

  @return $return-value;
}